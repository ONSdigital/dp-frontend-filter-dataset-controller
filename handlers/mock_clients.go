// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ONSdigital/dp-frontend-filter-dataset-controller/handlers (interfaces: DatasetClient,FilterClient,CodelistClient,HierarchyClient,Renderer)

// Package mock_handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	codelist "github.com/ONSdigital/go-ns/clients/codelist"
	dataset "github.com/ONSdigital/go-ns/clients/dataset"
	filter "github.com/ONSdigital/go-ns/clients/filter"
	hierarchy "github.com/ONSdigital/go-ns/clients/hierarchy"
	gomock "github.com/golang/mock/gomock"
)

// MockDatasetClient is a mock of DatasetClient interface
type MockDatasetClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatasetClientMockRecorder
}

// MockDatasetClientMockRecorder is the mock recorder for MockDatasetClient
type MockDatasetClientMockRecorder struct {
	mock *MockDatasetClient
}

// NewMockDatasetClient creates a new mock instance
func NewMockDatasetClient(ctrl *gomock.Controller) *MockDatasetClient {
	mock := &MockDatasetClient{ctrl: ctrl}
	mock.recorder = &MockDatasetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatasetClient) EXPECT() *MockDatasetClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDatasetClient) Get(arg0 string, arg1 ...dataset.Config) (dataset.Model, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(dataset.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDatasetClientMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatasetClient)(nil).Get), varargs...)
}

// GetDimensions mocks base method
func (m *MockDatasetClient) GetDimensions(arg0, arg1, arg2 string, arg3 ...dataset.Config) (dataset.Dimensions, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDimensions", varargs...)
	ret0, _ := ret[0].(dataset.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensions indicates an expected call of GetDimensions
func (mr *MockDatasetClientMockRecorder) GetDimensions(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensions", reflect.TypeOf((*MockDatasetClient)(nil).GetDimensions), varargs...)
}

// GetEditions mocks base method
func (m *MockDatasetClient) GetEditions(arg0 string, arg1 ...dataset.Config) ([]dataset.Edition, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEditions", varargs...)
	ret0, _ := ret[0].([]dataset.Edition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditions indicates an expected call of GetEditions
func (mr *MockDatasetClientMockRecorder) GetEditions(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditions", reflect.TypeOf((*MockDatasetClient)(nil).GetEditions), varargs...)
}

// GetOptions mocks base method
func (m *MockDatasetClient) GetOptions(arg0, arg1, arg2, arg3 string, arg4 ...dataset.Config) (dataset.Options, error) {
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOptions", varargs...)
	ret0, _ := ret[0].(dataset.Options)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptions indicates an expected call of GetOptions
func (mr *MockDatasetClientMockRecorder) GetOptions(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockDatasetClient)(nil).GetOptions), varargs...)
}

// GetVersion mocks base method
func (m *MockDatasetClient) GetVersion(arg0, arg1, arg2 string, arg3 ...dataset.Config) (dataset.Version, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(dataset.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockDatasetClientMockRecorder) GetVersion(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockDatasetClient)(nil).GetVersion), varargs...)
}

// GetVersionMetadata mocks base method
func (m *MockDatasetClient) GetVersionMetadata(arg0, arg1, arg2 string, arg3 ...dataset.Config) (dataset.Metadata, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersionMetadata", varargs...)
	ret0, _ := ret[0].(dataset.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionMetadata indicates an expected call of GetVersionMetadata
func (mr *MockDatasetClientMockRecorder) GetVersionMetadata(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionMetadata", reflect.TypeOf((*MockDatasetClient)(nil).GetVersionMetadata), varargs...)
}

// GetVersions mocks base method
func (m *MockDatasetClient) GetVersions(arg0, arg1 string, arg2 ...dataset.Config) ([]dataset.Version, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersions", varargs...)
	ret0, _ := ret[0].([]dataset.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersions indicates an expected call of GetVersions
func (mr *MockDatasetClientMockRecorder) GetVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersions", reflect.TypeOf((*MockDatasetClient)(nil).GetVersions), varargs...)
}

// Healthcheck mocks base method
func (m *MockDatasetClient) Healthcheck() (string, error) {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockDatasetClientMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockDatasetClient)(nil).Healthcheck))
}

// MockFilterClient is a mock of FilterClient interface
type MockFilterClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilterClientMockRecorder
}

// MockFilterClientMockRecorder is the mock recorder for MockFilterClient
type MockFilterClientMockRecorder struct {
	mock *MockFilterClient
}

// NewMockFilterClient creates a new mock instance
func NewMockFilterClient(ctrl *gomock.Controller) *MockFilterClient {
	mock := &MockFilterClient{ctrl: ctrl}
	mock.recorder = &MockFilterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilterClient) EXPECT() *MockFilterClientMockRecorder {
	return m.recorder
}

// AddDimension mocks base method
func (m *MockFilterClient) AddDimension(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "AddDimension", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimension indicates an expected call of AddDimension
func (mr *MockFilterClientMockRecorder) AddDimension(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDimension", reflect.TypeOf((*MockFilterClient)(nil).AddDimension), arg0, arg1)
}

// AddDimensionValue mocks base method
func (m *MockFilterClient) AddDimensionValue(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "AddDimensionValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimensionValue indicates an expected call of AddDimensionValue
func (mr *MockFilterClientMockRecorder) AddDimensionValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDimensionValue", reflect.TypeOf((*MockFilterClient)(nil).AddDimensionValue), arg0, arg1, arg2)
}

// AddDimensionValues mocks base method
func (m *MockFilterClient) AddDimensionValues(arg0, arg1 string, arg2 []string) error {
	ret := m.ctrl.Call(m, "AddDimensionValues", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimensionValues indicates an expected call of AddDimensionValues
func (mr *MockFilterClientMockRecorder) AddDimensionValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDimensionValues", reflect.TypeOf((*MockFilterClient)(nil).AddDimensionValues), arg0, arg1, arg2)
}

// CreateBlueprint mocks base method
func (m *MockFilterClient) CreateBlueprint(arg0 string, arg1 []string) (string, error) {
	ret := m.ctrl.Call(m, "CreateBlueprint", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlueprint indicates an expected call of CreateBlueprint
func (mr *MockFilterClientMockRecorder) CreateBlueprint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlueprint", reflect.TypeOf((*MockFilterClient)(nil).CreateBlueprint), arg0, arg1)
}

// GetDimension mocks base method
func (m *MockFilterClient) GetDimension(arg0, arg1 string) (filter.Dimension, error) {
	ret := m.ctrl.Call(m, "GetDimension", arg0, arg1)
	ret0, _ := ret[0].(filter.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimension indicates an expected call of GetDimension
func (mr *MockFilterClientMockRecorder) GetDimension(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimension", reflect.TypeOf((*MockFilterClient)(nil).GetDimension), arg0, arg1)
}

// GetDimensionOptions mocks base method
func (m *MockFilterClient) GetDimensionOptions(arg0, arg1 string) ([]filter.DimensionOption, error) {
	ret := m.ctrl.Call(m, "GetDimensionOptions", arg0, arg1)
	ret0, _ := ret[0].([]filter.DimensionOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensionOptions indicates an expected call of GetDimensionOptions
func (mr *MockFilterClientMockRecorder) GetDimensionOptions(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensionOptions", reflect.TypeOf((*MockFilterClient)(nil).GetDimensionOptions), arg0, arg1)
}

// GetDimensions mocks base method
func (m *MockFilterClient) GetDimensions(arg0 string) ([]filter.Dimension, error) {
	ret := m.ctrl.Call(m, "GetDimensions", arg0)
	ret0, _ := ret[0].([]filter.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensions indicates an expected call of GetDimensions
func (mr *MockFilterClientMockRecorder) GetDimensions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDimensions", reflect.TypeOf((*MockFilterClient)(nil).GetDimensions), arg0)
}

// GetJobState mocks base method
func (m *MockFilterClient) GetJobState(arg0 string) (filter.Model, error) {
	ret := m.ctrl.Call(m, "GetJobState", arg0)
	ret0, _ := ret[0].(filter.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobState indicates an expected call of GetJobState
func (mr *MockFilterClientMockRecorder) GetJobState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobState", reflect.TypeOf((*MockFilterClient)(nil).GetJobState), arg0)
}

// GetOutput mocks base method
func (m *MockFilterClient) GetOutput(arg0 string) (filter.Model, error) {
	ret := m.ctrl.Call(m, "GetOutput", arg0)
	ret0, _ := ret[0].(filter.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput
func (mr *MockFilterClientMockRecorder) GetOutput(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockFilterClient)(nil).GetOutput), arg0)
}

// GetPreview mocks base method
func (m *MockFilterClient) GetPreview(arg0 string) (filter.Preview, error) {
	ret := m.ctrl.Call(m, "GetPreview", arg0)
	ret0, _ := ret[0].(filter.Preview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreview indicates an expected call of GetPreview
func (mr *MockFilterClientMockRecorder) GetPreview(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreview", reflect.TypeOf((*MockFilterClient)(nil).GetPreview), arg0)
}

// Healthcheck mocks base method
func (m *MockFilterClient) Healthcheck() (string, error) {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockFilterClientMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockFilterClient)(nil).Healthcheck))
}

// RemoveDimension mocks base method
func (m *MockFilterClient) RemoveDimension(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveDimension", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDimension indicates an expected call of RemoveDimension
func (mr *MockFilterClientMockRecorder) RemoveDimension(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDimension", reflect.TypeOf((*MockFilterClient)(nil).RemoveDimension), arg0, arg1)
}

// RemoveDimensionValue mocks base method
func (m *MockFilterClient) RemoveDimensionValue(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "RemoveDimensionValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDimensionValue indicates an expected call of RemoveDimensionValue
func (mr *MockFilterClientMockRecorder) RemoveDimensionValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDimensionValue", reflect.TypeOf((*MockFilterClient)(nil).RemoveDimensionValue), arg0, arg1, arg2)
}

// UpdateBlueprint mocks base method
func (m *MockFilterClient) UpdateBlueprint(arg0 filter.Model, arg1 bool) (filter.Model, error) {
	ret := m.ctrl.Call(m, "UpdateBlueprint", arg0, arg1)
	ret0, _ := ret[0].(filter.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlueprint indicates an expected call of UpdateBlueprint
func (mr *MockFilterClientMockRecorder) UpdateBlueprint(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlueprint", reflect.TypeOf((*MockFilterClient)(nil).UpdateBlueprint), arg0, arg1)
}

// MockCodelistClient is a mock of CodelistClient interface
type MockCodelistClient struct {
	ctrl     *gomock.Controller
	recorder *MockCodelistClientMockRecorder
}

// MockCodelistClientMockRecorder is the mock recorder for MockCodelistClient
type MockCodelistClientMockRecorder struct {
	mock *MockCodelistClient
}

// NewMockCodelistClient creates a new mock instance
func NewMockCodelistClient(ctrl *gomock.Controller) *MockCodelistClient {
	mock := &MockCodelistClient{ctrl: ctrl}
	mock.recorder = &MockCodelistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodelistClient) EXPECT() *MockCodelistClientMockRecorder {
	return m.recorder
}

// GetIDNameMap mocks base method
func (m *MockCodelistClient) GetIDNameMap(arg0 string) (map[string]string, error) {
	ret := m.ctrl.Call(m, "GetIDNameMap", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDNameMap indicates an expected call of GetIDNameMap
func (mr *MockCodelistClientMockRecorder) GetIDNameMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDNameMap", reflect.TypeOf((*MockCodelistClient)(nil).GetIDNameMap), arg0)
}

// GetValues mocks base method
func (m *MockCodelistClient) GetValues(arg0 string) (codelist.DimensionValues, error) {
	ret := m.ctrl.Call(m, "GetValues", arg0)
	ret0, _ := ret[0].(codelist.DimensionValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues
func (mr *MockCodelistClientMockRecorder) GetValues(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockCodelistClient)(nil).GetValues), arg0)
}

// Healthcheck mocks base method
func (m *MockCodelistClient) Healthcheck() (string, error) {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockCodelistClientMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockCodelistClient)(nil).Healthcheck))
}

// MockHierarchyClient is a mock of HierarchyClient interface
type MockHierarchyClient struct {
	ctrl     *gomock.Controller
	recorder *MockHierarchyClientMockRecorder
}

// MockHierarchyClientMockRecorder is the mock recorder for MockHierarchyClient
type MockHierarchyClientMockRecorder struct {
	mock *MockHierarchyClient
}

// NewMockHierarchyClient creates a new mock instance
func NewMockHierarchyClient(ctrl *gomock.Controller) *MockHierarchyClient {
	mock := &MockHierarchyClient{ctrl: ctrl}
	mock.recorder = &MockHierarchyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHierarchyClient) EXPECT() *MockHierarchyClientMockRecorder {
	return m.recorder
}

// GetChild mocks base method
func (m *MockHierarchyClient) GetChild(arg0, arg1, arg2 string) (hierarchy.Model, error) {
	ret := m.ctrl.Call(m, "GetChild", arg0, arg1, arg2)
	ret0, _ := ret[0].(hierarchy.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChild indicates an expected call of GetChild
func (mr *MockHierarchyClientMockRecorder) GetChild(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChild", reflect.TypeOf((*MockHierarchyClient)(nil).GetChild), arg0, arg1, arg2)
}

// GetRoot mocks base method
func (m *MockHierarchyClient) GetRoot(arg0, arg1 string) (hierarchy.Model, error) {
	ret := m.ctrl.Call(m, "GetRoot", arg0, arg1)
	ret0, _ := ret[0].(hierarchy.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoot indicates an expected call of GetRoot
func (mr *MockHierarchyClientMockRecorder) GetRoot(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockHierarchyClient)(nil).GetRoot), arg0, arg1)
}

// Healthcheck mocks base method
func (m *MockHierarchyClient) Healthcheck() (string, error) {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockHierarchyClientMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockHierarchyClient)(nil).Healthcheck))
}

// MockRenderer is a mock of Renderer interface
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockRenderer) Do(arg0 string, arg1 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockRendererMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRenderer)(nil).Do), arg0, arg1)
}

// Healthcheck mocks base method
func (m *MockRenderer) Healthcheck() (string, error) {
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockRendererMockRecorder) Healthcheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockRenderer)(nil).Healthcheck))
}
