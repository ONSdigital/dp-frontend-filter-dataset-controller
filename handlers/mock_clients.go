// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ONSdigital/dp-frontend-filter-dataset-controller/handlers (interfaces: FilterClient,DatasetClient,CodelistClient,HierarchyClient,Renderer)

package handlers

import (
	codelist "github.com/ONSdigital/go-ns/clients/codelist"
	dataset "github.com/ONSdigital/go-ns/clients/dataset"
	filter "github.com/ONSdigital/go-ns/clients/filter"
	hierarchy "github.com/ONSdigital/go-ns/clients/hierarchy"
	gomock "github.com/golang/mock/gomock"
)

// MockFilterClient is a mock of FilterClient interface
type MockFilterClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilterClientMockRecorder
}

// MockFilterClientMockRecorder is the mock recorder for MockFilterClient
type MockFilterClientMockRecorder struct {
	mock *MockFilterClient
}

// NewMockFilterClient creates a new mock instance
func NewMockFilterClient(ctrl *gomock.Controller) *MockFilterClient {
	mock := &MockFilterClient{ctrl: ctrl}
	mock.recorder = &MockFilterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFilterClient) EXPECT() *MockFilterClientMockRecorder {
	return _m.recorder
}

// AddDimension mocks base method
func (_m *MockFilterClient) AddDimension(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AddDimension", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimension indicates an expected call of AddDimension
func (_mr *MockFilterClientMockRecorder) AddDimension(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDimension", arg0, arg1)
}

// AddDimensionValue mocks base method
func (_m *MockFilterClient) AddDimensionValue(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "AddDimensionValue", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimensionValue indicates an expected call of AddDimensionValue
func (_mr *MockFilterClientMockRecorder) AddDimensionValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDimensionValue", arg0, arg1, arg2)
}

// AddDimensionValues mocks base method
func (_m *MockFilterClient) AddDimensionValues(_param0 string, _param1 string, _param2 []string) error {
	ret := _m.ctrl.Call(_m, "AddDimensionValues", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDimensionValues indicates an expected call of AddDimensionValues
func (_mr *MockFilterClientMockRecorder) AddDimensionValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDimensionValues", arg0, arg1, arg2)
}

// GetDimension mocks base method
func (_m *MockFilterClient) GetDimension(_param0 string, _param1 string) (filter.Dimension, error) {
	ret := _m.ctrl.Call(_m, "GetDimension", _param0, _param1)
	ret0, _ := ret[0].(filter.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimension indicates an expected call of GetDimension
func (_mr *MockFilterClientMockRecorder) GetDimension(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDimension", arg0, arg1)
}

// GetDimensionOptions mocks base method
func (_m *MockFilterClient) GetDimensionOptions(_param0 string, _param1 string) ([]filter.DimensionOption, error) {
	ret := _m.ctrl.Call(_m, "GetDimensionOptions", _param0, _param1)
	ret0, _ := ret[0].([]filter.DimensionOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensionOptions indicates an expected call of GetDimensionOptions
func (_mr *MockFilterClientMockRecorder) GetDimensionOptions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDimensionOptions", arg0, arg1)
}

// GetDimensions mocks base method
func (_m *MockFilterClient) GetDimensions(_param0 string) ([]filter.Dimension, error) {
	ret := _m.ctrl.Call(_m, "GetDimensions", _param0)
	ret0, _ := ret[0].([]filter.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDimensions indicates an expected call of GetDimensions
func (_mr *MockFilterClientMockRecorder) GetDimensions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDimensions", arg0)
}

// GetJobState mocks base method
func (_m *MockFilterClient) GetJobState(_param0 string) (filter.Model, error) {
	ret := _m.ctrl.Call(_m, "GetJobState", _param0)
	ret0, _ := ret[0].(filter.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobState indicates an expected call of GetJobState
func (_mr *MockFilterClientMockRecorder) GetJobState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetJobState", arg0)
}

// Healthcheck mocks base method
func (_m *MockFilterClient) Healthcheck() (string, error) {
	ret := _m.ctrl.Call(_m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (_mr *MockFilterClientMockRecorder) Healthcheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthcheck")
}

// RemoveDimension mocks base method
func (_m *MockFilterClient) RemoveDimension(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "RemoveDimension", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDimension indicates an expected call of RemoveDimension
func (_mr *MockFilterClientMockRecorder) RemoveDimension(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDimension", arg0, arg1)
}

// RemoveDimensionValue mocks base method
func (_m *MockFilterClient) RemoveDimensionValue(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "RemoveDimensionValue", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDimensionValue indicates an expected call of RemoveDimensionValue
func (_mr *MockFilterClientMockRecorder) RemoveDimensionValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDimensionValue", arg0, arg1, arg2)
}

// MockDatasetClient is a mock of DatasetClient interface
type MockDatasetClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatasetClientMockRecorder
}

// MockDatasetClientMockRecorder is the mock recorder for MockDatasetClient
type MockDatasetClientMockRecorder struct {
	mock *MockDatasetClient
}

// NewMockDatasetClient creates a new mock instance
func NewMockDatasetClient(ctrl *gomock.Controller) *MockDatasetClient {
	mock := &MockDatasetClient{ctrl: ctrl}
	mock.recorder = &MockDatasetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatasetClient) EXPECT() *MockDatasetClientMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockDatasetClient) Get(_param0 string) (dataset.Model, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(dataset.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockDatasetClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

// GetEditions mocks base method
func (_m *MockDatasetClient) GetEditions(_param0 string) ([]dataset.Edition, error) {
	ret := _m.ctrl.Call(_m, "GetEditions", _param0)
	ret0, _ := ret[0].([]dataset.Edition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditions indicates an expected call of GetEditions
func (_mr *MockDatasetClientMockRecorder) GetEditions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEditions", arg0)
}

// GetVersion mocks base method
func (_m *MockDatasetClient) GetVersion(_param0 string, _param1 string, _param2 string) (dataset.Version, error) {
	ret := _m.ctrl.Call(_m, "GetVersion", _param0, _param1, _param2)
	ret0, _ := ret[0].(dataset.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (_mr *MockDatasetClientMockRecorder) GetVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVersion", arg0, arg1, arg2)
}

// GetVersions mocks base method
func (_m *MockDatasetClient) GetVersions(_param0 string, _param1 string) ([]dataset.Version, error) {
	ret := _m.ctrl.Call(_m, "GetVersions", _param0, _param1)
	ret0, _ := ret[0].([]dataset.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersions indicates an expected call of GetVersions
func (_mr *MockDatasetClientMockRecorder) GetVersions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVersions", arg0, arg1)
}

// Healthcheck mocks base method
func (_m *MockDatasetClient) Healthcheck() (string, error) {
	ret := _m.ctrl.Call(_m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (_mr *MockDatasetClientMockRecorder) Healthcheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthcheck")
}

// MockCodelistClient is a mock of CodelistClient interface
type MockCodelistClient struct {
	ctrl     *gomock.Controller
	recorder *MockCodelistClientMockRecorder
}

// MockCodelistClientMockRecorder is the mock recorder for MockCodelistClient
type MockCodelistClientMockRecorder struct {
	mock *MockCodelistClient
}

// NewMockCodelistClient creates a new mock instance
func NewMockCodelistClient(ctrl *gomock.Controller) *MockCodelistClient {
	mock := &MockCodelistClient{ctrl: ctrl}
	mock.recorder = &MockCodelistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCodelistClient) EXPECT() *MockCodelistClientMockRecorder {
	return _m.recorder
}

// GetIDNameMap mocks base method
func (_m *MockCodelistClient) GetIDNameMap(_param0 string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "GetIDNameMap", _param0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDNameMap indicates an expected call of GetIDNameMap
func (_mr *MockCodelistClientMockRecorder) GetIDNameMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetIDNameMap", arg0)
}

// GetValues mocks base method
func (_m *MockCodelistClient) GetValues(_param0 string) (codelist.DimensionValues, error) {
	ret := _m.ctrl.Call(_m, "GetValues", _param0)
	ret0, _ := ret[0].(codelist.DimensionValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues
func (_mr *MockCodelistClientMockRecorder) GetValues(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetValues", arg0)
}

// Healthcheck mocks base method
func (_m *MockCodelistClient) Healthcheck() (string, error) {
	ret := _m.ctrl.Call(_m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (_mr *MockCodelistClientMockRecorder) Healthcheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthcheck")
}

// MockHierarchyClient is a mock of HierarchyClient interface
type MockHierarchyClient struct {
	ctrl     *gomock.Controller
	recorder *MockHierarchyClientMockRecorder
}

// MockHierarchyClientMockRecorder is the mock recorder for MockHierarchyClient
type MockHierarchyClientMockRecorder struct {
	mock *MockHierarchyClient
}

// NewMockHierarchyClient creates a new mock instance
func NewMockHierarchyClient(ctrl *gomock.Controller) *MockHierarchyClient {
	mock := &MockHierarchyClient{ctrl: ctrl}
	mock.recorder = &MockHierarchyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHierarchyClient) EXPECT() *MockHierarchyClientMockRecorder {
	return _m.recorder
}

// GetHierarchy mocks base method
func (_m *MockHierarchyClient) GetHierarchy(_param0 string) (hierarchy.Model, error) {
	ret := _m.ctrl.Call(_m, "GetHierarchy", _param0)
	ret0, _ := ret[0].(hierarchy.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHierarchy indicates an expected call of GetHierarchy
func (_mr *MockHierarchyClientMockRecorder) GetHierarchy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHierarchy", arg0)
}

// Healthcheck mocks base method
func (_m *MockHierarchyClient) Healthcheck() (string, error) {
	ret := _m.ctrl.Call(_m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (_mr *MockHierarchyClientMockRecorder) Healthcheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthcheck")
}

// MockRenderer is a mock of Renderer interface
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return _m.recorder
}

// Do mocks base method
func (_m *MockRenderer) Do(_param0 string, _param1 []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Do", _param0, _param1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (_mr *MockRendererMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Do", arg0, arg1)
}

// Healthcheck mocks base method
func (_m *MockRenderer) Healthcheck() (string, error) {
	ret := _m.ctrl.Call(_m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (_mr *MockRendererMockRecorder) Healthcheck() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Healthcheck")
}
